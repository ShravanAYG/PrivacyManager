# using flask_restful 
from flask import Flask, jsonify, request 
from flask_restful import Resource, Api 
import uuid
import requests

# creating the flask app 
app = Flask(__name__) 
# creating an API object 
api = Api(app) 

# making a class for a particular resource 
# the get, post methods correspond to get and post requests 
# they are automatically mapped by flask_restful. 
# other methods include put, delete, etc. 
class Hello(Resource): 

	# corresponds to the GET request. 
	# this function is called whenever there 
	# is a GET request for this resource 
	def get(self): 

		return jsonify({'message': 'hello world'}) 

	# Corresponds to POST request 
	def post(self): 
		
		data = request.get_json()	 # status code 
		return jsonify({'data': data}), 201


# another resource to calculate the square of a number 
class Square(Resource): 

	def get(self, num): 

		return jsonify({'square': num**2}) 

class Uuid(Resource):
	
	def get(self):
		token = uuid.uuid4().hex
		return jsonify({'uuid': token})

class Inbox(Resource):

	def get(set):
		URL = "http://api.guerrillamail.com/ajax.php"

		# Cookie string (if required by the server, add it properly in headers)
		COOKIES = {'PHPSESSID': 'besk386tgsap9iig87b8m0lja9'}

		# Defining a params dictionary for the parameters to be sent to the API
		PARAMS = {
    			'f': 'get_email_list',
    			'offset': '0',
    			'seq': '0',
    			'ip': '127.0.0.1',  # Corrected parameter format
    			'agent': 'Mozilla_5.0'
		}

		# Sending GET request with the specified URL, params, and cookies
		r = requests.get(url=URL, params=PARAMS, cookies=COOKIES)

		# Checking if the request was successful
		if r.status_code == 200:
   			 # Extracting data in JSON format
    			try:
        			data = r.json()
        			print(data)
    			except ValueError:
        			print("Error: Could not parse JSON response.")
		else:
   		 print(f"Request failed with status code: {r.status_code}")
	


# adding the defined resources along with their corresponding urls 
api.add_resource(Hello, '/') 
api.add_resource(Square, '/square/<int:num>') 
api.add_resource(Uuid, '/api/uuid/new')
api.add_resource(Inbox, '/inbox')


# driver function 
if __name__ == '__main__': 

	app.run(debug = True) 


